update.packages(ask='graphics',checkBuilt=TRUE)
q()
install.packages(c("slidify","ggplot2","devtools"))
library()
library(ggplot2)
search()
q()
find.packages("devtools")
find.package("devtools")
library(devtools)
help("devtools")
help("utils")
search()
find_rtools()
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, , 0.5)
if (coin == 1){
z <- z + 1
} else {
z <- z - 1
}
}
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if (coin == 1){
z <- z + 1
} else {
z <- z - 1
}
}
coin <- rbinom(1,1, 0.5)
coin
coin
coin
coin <- rbinom(1,1, 0.5)
coin
xx <- 1
yy <- 2
print(xx,yy)
print(yy)
x0 <- 1
tol <- 1e-8
repeat {
x1 <- computeEstimate()
if(abs(x1 - x0) < tol) {
print(x1-x0)
print(tol)
break
} else {
x0 <- x1
}
}
sd(mydata)
mydata <- rnorm(100)
mydata
sd(x = mydata)
sd(x = mydata, na.rm = FALSE)
sd(na.rm = FALSE, x = mydata)
sd(na.rm = FALSE, mydata)
f <- function(a, b){
a^2
}
f
f(2)
print
print()
help("print")
f <- function(a, b) {
print(a)
print(b)
}
f(4,5)
f(45)
mean
args(paste)
ags(cat)
args(cat)
args(print)
pase("a", "b", sep = ":")
paste("a", "b", sep = ":")
paste("a", "b", se = ":")
q()
add2 <- function(x, y){
x + y
}
add2(3, 5)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1;20
x <- 1:20
x
above(x, 12
)
use
use1 <- x < 12
use
use1
x[use1]
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
above(x, n=11)
airquality
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
install.packages("swirl")
library(swirl)
ls
ls()
search()
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z * 2 + 100
mysqrt <- sqrt(z-1)
mySqrt <- sqrt(z-1)
print(mySqrt)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
p(c(0, 1, 2), times = 10)
(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect[num_vect < 1]
info()
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "sjchan_ds")
my_name <- c(my_char, "sjchan_ds")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1, 2, 3), c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(data.frame)
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData) <- cnames
myData
source("complete.R")
getwd()
source.with.encoding('C:/Users/SJ/Desktop/coursera/complete.R', encoding='UTF-8')
complete("specdata", 1)
?cor
str(tapply)
x <- c(rnorm(16), runif(10), rnorm(10,1)
)
f <- gl(3, 10)
help(gl)
f
tapply(x, f, mean)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f mean, simplify = FALSE)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, range)
str(split)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3, 10)
split(x, f)
lapply(split(x, f), mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")],na.rm=TRUE))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5, 2)
f1
f2
interaction(f1,f2)
str(split(x, list(f1,f2))
)
str(split(x, list(f1,f2), drop=TRUE))
quit()
ls()
search()
library(devtools)
library("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
search()
find_rtools()
install.package("sqldf")
install.packages("sqldf")
help(dcast)
??dcast
par("bg")
help(par)
q()
help(grep)
install.packages("FITSio")
library("FitSio")
library("FITSio")
update.packages(ask='graphics',checkBuilt=TRUE)
update.packages(ask='graphics',checkBuilt=TRUE)
utils:::menuInstallPkgs()
install.packages("FITSio")
library()
ls()
search()
q()
library("FITSio")
search()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
update.packages(ask='graphics',checkBuilt=TRUE)
q()
pqs
q()
q()
library(kernlab)
?
?
)
ls(0)
dir
dir()
ls
ls()
search()
data(spam)
str(spam[,15])
str(spam[,1:5])
str(spam)
str(spam[,1:5])
set.seed(3435)
str(spam)
trainIndicator = rbinom(4601,size=1,prob=0.5)
str(trainIndicator)
table(trainIndicator)
help(table)
trainSpam = spam[trainIndicator==1,]
trainSpam
str(trainSpam)
testSpam = spam[trainIndicator==0,]
trainSpam
table(trainIndicator)
name(trainSpam)
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
ls()
dir()
dir()
getwd()
setwd("C:/Users/SJ/RepData_PeerAssessment1")
dir()
library(knitr)
knitr(PA1_tmplate.Rmd)
search()
knitr(PA1_tmplate.Rmd)
